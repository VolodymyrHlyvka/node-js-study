name: Docker Image CI

on:
  push:
    branches: [node-perspective-api]
  pull_request:
    branches: [node-perspective-api]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.0

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v2

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1

      # - name: Build and push Docker image
      #   id: build-image
      #   run: |
      #     REPOSITORY_URI=${{ secrets.ECR_REPOSITORY }}
      #     IMAGE_TAG=latest

      #     echo "Building Docker image..."
      #     docker build -t $REPOSITORY_URI:$IMAGE_TAG .

      #     echo "Pushing Docker image to ECR..."
      #     docker push $REPOSITORY_URI:$IMAGE_TAG

      # - name: Post Docker image details
      #   run: |
      #     echo "Image URI: ${{ steps.build-image.outputs.image }}"

      # - name: Invoke SSM Document
      #   run: |
      #     aws ssm send-command --document-name "PullAndRunDockerImage" \
      #                          --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
      #                          --comment "Deploy Docker image to EC2"
      #   env:
      #     AWS_REGION: ${{ secrets.AWS_REGION }}
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -out plan.out

      - name: Terraform Apply
        run: terraform apply -auto-approve plan.out

      - name: Post Terraform outputs
        run: |
          echo "EC2 Instance ID: $(terraform output instance_id)"

      - name: Get EC2 Instance ID
        id: get-instance-id
        run: echo "EC2_INSTANCE_ID=$(terraform output -raw instance_id)" >> $GITHUB_ENV

      - name: Update MongoDB container
        run: |
          aws ssm send-command --document-name "UpdateMongoDockerImage" \
                               --targets '[{"Key":"instanceIds","Values":["${{ env.EC2_INSTANCE_ID }}"]}]' \
                               --comment "Update MongoDB Docker container" \

        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      
